pop_df
pop_df_m = melt(pop_df, id.vars = "...1")
names(pop_df_m) = c("Sex", "Area", "Population")
# Business visualisations -------------------------------------------------------------------------
#### NNDR
nndr = fread("../data/Businesses/2022/non-domestic rates collected lginform 2010-22.csv",skip=4)
# nndr_df = nndr.copy().iloc[3:,:]
# nndr_df = nndr_df.rename(columns={"area label":"Area"}).drop("area", axis=1)
nndr_df <- nndr[2:length(nndr)]
nndr_df[,area:=NULL]
nndr_df <- setnames(nndr_df, "area label", "Area")
#nndr_df_m = nndr_df.melt(id_vars="Area")
nndr_df_m <- melt(nndr_df, id.vars="Area")
nndr_df_m = nndr_df_m[!is.na(Area)]
nndr_df_m = nndr_df_m[variable != "area long label"]
nndr_df_m[,variable:=as.character(variable)]
# nndr_df_m_dates = nndr_df_m["variable"].str.split(" ", expand=True)
## https://stackoverflow.com/questions/12946883/strsplit-by-row-and-distribute-results-by-column-in-data-frame
S1 <- nndr_df_m[, list(X = unlist(strsplit(variable, " "))), by = seq_len(nrow(nndr_df_m))]
S1[, Time := sequence(.N), by = seq_len]
nndr_df_m_dates = dcast.data.table(S1, seq_len ~ Time, value.var="X")
nndr_df_m_dates[,seq_len:=NULL]
# nndr_df_m_d = nndr_df_m.join(nndr_df_m_dates)
nndr_df_m_d = merge.data.frame(nndr_df_m, nndr_df_m_dates, by = "row.names") %>% data.table()
nndr_df_m_d
## Change metric to millions rather than thousands
nndr_df_m_d[, value:=round(as.numeric(gsub(",","",value))/1000,2)]
# nndr_df_m_d = nndr_df_m_d.rename(columns={"value":"NNDR collected (£, 1000s)", 0:"Year", 1:"Quarter"})
setnames(nndr_df_m_d, c("value", "1", "2"), c("NNDR collected (£, millions)", "Year", "Quarter"), skip_absent = T)
# nndr_df_m_d["Year"] = nndr_df_m_d["Year"].str.replace("/.*","", regex = True)
nndr_df_m_d[,Year:=as.integer(gsub("/.*","",Year, fixed=F))]
nndr_df_m_d[,Year]
# nndr_df_m_d["NNDR collected (£, 1000s)"] = nndr_df_m_d["NNDR collected (£, 1000s)"].str.replace(",","").astype(int)
nndr_df_m_d[,`NNDR collected (£, millions)`:=  as.integer(gsub(",","",`NNDR collected (£, millions)`))]
## Group by year
# nndr_df_m_d_yr = nndr_df_m_d[["Area","NNDR collected (£, 1000s)","Year"]].groupby(by=["Area","Year"]).sum().reset_index()
nndr_df_m_d_yr <- nndr_df_m_d[,c("Quarter","Area","Year", "NNDR collected (£, millions)"),with=F]
nndr_df_m_d_yr <- nndr_df_m_d_yr[,.(`NNDR collected (£, millions)`= sum(`NNDR collected (£, millions)`)), by=.(Area, Year)]
nndr_df_m_d_yr <- nndr_df_m_d_yr[!is.na(Area)]
## Later than 2018, earlier than 2022 (not complete year)
# nndr_df_m_d_yr = nndr_df_m_d_yr[nndr_df_m_d_yr["Year"] >= 2018]
nndr_df_m_d_yr_18 <- nndr_df_m_d_yr[Year >= 2018 & Year < 2022]
nndr_df_m_d_yr_18
vals_2019 = nndr_df_m_d_yr_18[Year == 2019]
vals_2019 = setnames(vals_2019, "NNDR collected (£, millions)", "NNDR collected 2019 (£, millions)")
nndr_df_m_d_yr_18_m = merge(nndr_df_m_d_yr_18, vals_2019[,c("Area", "NNDR collected 2019 (£, millions)")], by = "Area", how = "left")
nndr_df_m_d_yr_18_m[,`NNDR collected as percentage of 2019 collection` := round((`NNDR collected (£, millions)`/`NNDR collected 2019 (£, millions)`)*100,2)]
#### For Lambeth
# nndr_df_m_d_yr_lam = nndr_df_m_d_yr[nndr_df_m_d_yr['Area']=="Lambeth"]
nndr_df_m_d_yr_18_lam <- nndr_df_m_d_yr_18_m[`Area` == "Lambeth"]
nndr_df_m_d_yr_18_lam
## For London only by year
nndr_df_m_d_yr_18_lon <- nndr_df_m_d_yr_18_m[,.(`NNDR collected (£, millions)`= sum(`NNDR collected (£, millions)`),
`NNDR collected 2019 (£, millions)`= sum(`NNDR collected 2019 (£, millions)`),
`NNDR collected as percentage of 2019 collection` = round(mean(`NNDR collected as percentage of 2019 collection`,na.rm=TRUE)
,2)), by=.(Year)]
nndr_df_m_d_yr_18_lon[,Area:="London"]
nndr_df_m_d_yr_18_lon
### Concat Lambeth and London
nndr_df_m_d_yr_18_g = rbindlist(list(nndr_df_m_d_yr_18_lam[,sort(names(nndr_df_m_d_yr_18_lam)), with = F],
nndr_df_m_d_yr_18_lon[,sort(names(nndr_df_m_d_yr_18_lon)), with = F]), use.names=F)
nndr_df_m_d_yr_18_g
names(nndr_df_m_d_yr_18_g)
# Present on a ggplotly graph
nndr_comparison_graph = ggplot(nndr_df_m_d_yr_18_g, aes(x = `Year`, y = `NNDR collected as percentage of 2019 collection`, fill = Area#,
#label = `NNDR collected as percentage of 2019 collection`
)) +
geom_col(position = position_dodge(width = 0.9)) +
scale_fill_discrete(type=lambeth_palette_graph) +
theme_bw()
nndr_comparison_graph
show_colors2(rev(lambeth_palette_full))
show_colors2(rev(lambeth_palette_graph))
lambeth_palette_graph = c("#006699" , "#993399",  "#09a9a4", "#ff9900", "#cc0033", "#000066", "#cccc00",
"#066e6b", "#4c2c92",  "#ff6600", "#08802f", "#333333")
show_colors2(rev(lambeth_palette_graph))
# Present on a ggplotly graph
nndr_comparison_graph = ggplot(nndr_df_m_d_yr_18_g, aes(x = `Year`, y = `NNDR collected as percentage of 2019 collection`, fill = Area#,
#label = `NNDR collected as percentage of 2019 collection`
)) +
geom_col(position = position_dodge(width = 0.9)) +
scale_fill_discrete(type=lambeth_palette_graph) +
theme_bw()
nndr_comparison_graph
lambeth_palette_graph = c("#09a9a4","#006699" , "#993399",   "#ff9900", "#cc0033", "#000066", "#cccc00",
"#066e6b", "#4c2c92",  "#ff6600", "#08802f", "#333333")
# Present on a ggplotly graph
nndr_comparison_graph = ggplot(nndr_df_m_d_yr_18_g, aes(x = `Year`, y = `NNDR collected as percentage of 2019 collection`, fill = Area#,
#label = `NNDR collected as percentage of 2019 collection`
)) +
geom_col(position = position_dodge(width = 0.9)) +
scale_fill_discrete(type=lambeth_palette_graph) +
theme_bw()
nndr_comparison_graph
show_colors2(rev(lambeth_palette_graph))
show_colors(lambeth_palette_graph)
source('./colour_theme.r')
library(flexdashboard)
library(ggplot2)
library(plotly)
library(DT)
library(shiny)
run_direct = F
source('data and charts.r')
# Load packages, functions ------------------------------------------------
library(ggplot2)
library(dplyr)
library(plotly)
library(readxl)
library(tidyr)
library(ggthemes)
library(leaflet)
library(DT)
library(openxlsx)
library(data.table)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
library(flexdashboard)
library(ggplot2)
library(plotly)
library(DT)
library(shiny)
run_direct = F
#source('data and charts.r')
source('section_charts/jobs_earnings_business.r')
source('section_charts/education.r')
source('section_charts/education.r')
source('section_charts/education.r')
source('section_charts/education.r')
source('section_charts/education.r')
source('data and charts.r')
library(ggplot2)
library(dplyr)
library(plotly)
library(readxl)
library(tidyr)
library(ggthemes)
library(leaflet)
library(DT)
library(openxlsx)
library(data.table)
source('colour_theme.r')
data_sources <- read.xlsx('Data sources.xlsx') %>% as.data.table()
ggplotly(progression_to_he_graph, tooltip = c("text")) %>% layout(autosize = T, # margin = m,
font=lam_ggplotly_font) # , height = 500
make_datatable(progression_to_he_all, visual_name = "16-18 destination measures")
paste(c("location.href='",data_sources[(`Visual short name` == ref_name) + 1, `Internal link`],"';"), collapse = "")
source('data and charts.r')
paste(c("location.href='",data_sources[(`Visual short name` == ref_name) + 1, `Internal link`],"';"), collapse = "")
ref_name="Population by sex"
paste(c("location.href='",data_sources[(`Visual short name` == ref_name) + 1, `Internal link`],"';"), collapse = "")
data_sources[(`Visual short name` == ref_name) + 1, `Internal link`]
data_sources[`Visual short name` == ref_name, `Internal link`]
paste(c("location.href='",data_sources[`Visual short name` == ref_name, `Internal link`],"';"), collapse = "")
data_sources[`Visual short name` == ref_name]
data_sources[`Visual short name` == ref_name, Number]
data_sources[`Visual short name` == ref_name, Number] + 1
paste(c("location.href='",data_sources[Number == (data_sources[`Visual short name` == ref_name, Number] + 1), `Internal link`],"';"), collapse = "")
library(flexdashboard)
library(ggplot2)
library(plotly)
library(DT)
library(shiny)
library(magrittr)
run_direct = F
source('data and charts.r')
source('colour_theme.r')
source('section_charts/key_demographics.r')
source('section_charts/jobs_earnings_business.r')
source('section_charts/education.r')
source('section_charts/environment.r')
source('section_charts/housing_infrastructure.r')
source('section_charts/crime_safety_justice.r')
source('section_charts/community.r')
previous_button = function(data_sources_f = data_sources, ref_name_f = ref_name) {
last_button <- actionButton(paste(c(data_sources_f[`Visual short name` == ref_name_f, `Internal link suffix`],"-last"),collapse=""), label = "Previous", class = "btn btn-lg btn-primary", icon = icon("chevron-left", lib = "glyphicon"),
onclick=paste(c("location.href='",data_sources_f[Number == (data_sources_f[`Visual short name` == ref_name_f, Number - 1]), `Internal link`],"';"), collapse = ""))#, width = "50px")
return(last_button)
}
previous_button()
previous_button = function(data_sources_f = data_sources, ref_name_f = ref_name) {
last_button <- actionButton(paste(c(data_sources_f[`Visual short name` == ref_name_f, `Internal link suffix`],"-last"),collapse=""), label = "Previous", class = "btn btn-lg btn-primary", icon = icon("chevron-left", lib = "glyphicon"),
onclick=paste(c("location.href='",data_sources_f[Number == (data_sources_f[`Visual short name` == ref_name_f, Number - 1]), `Internal link`],"';"), collapse = ""))#, width = "50px")
return(last_button)
}
previous_button()
next_button = function(data_sources_f = data_sources, ref_name_f = ref_name) {
nxt_button <- actionButton(paste(c(data_sources_f[`Visual short name` == ref_name_f, `Internal link suffix`],"-next"),collapse=""), label = "Next", class = "btn btn-lg btn-primary", icon = icon("chevron-right", lib = "glyphicon"),
onclick=paste(c("location.href='",data_sources_f[Number == (data_sources_f[`Visual short name` == ref_name_f, Number] + 1), `Internal link`],"';"), collapse = ""))#, width = "50px")
return(nxt_button)
}
next_button()
# Workforce by employment category {data-navmenu="Jobs and finances"}
```{r echo=FALSE}
## Column {data-width="350"}
# Religion {data-navmenu="Key demographics"}
# Early years providers {data-navmenu="Education"}
library(flexdashboard)
library(ggplot2)
library(plotly)
library(DT)
library(shiny)
library(magrittr)
run_direct = F
source('data and charts.r')
source('colour_theme.r')
source('section_charts/key_demographics.r')
source('section_charts/jobs_earnings_business.r')
source('section_charts/education.r')
source('section_charts/environment.r')
source('section_charts/housing_infrastructure.r')
source('section_charts/crime_safety_justice.r')
source('section_charts/community.r')
source('section_charts/map_ward_key_demographics.r')
source('section_charts/Health.r')
make_theme_index <- function(data_sources_f = data_sources, section_name_f = section_name) {
internal_link_col = "Internal link"
theme_data <- data_sources_f[`Section name`== section_name_f]
source_out <- list()
for (i in 1:ncol(theme_data)){
source <-
paste(c("<a href=",theme_data[i, ..data_link_col],' target="_blank">',theme_data[i, `Visual short name`],"</a>.")
,collapse="")
source_out[i] <- source
}
#htmltools::withTags(HTML())
return(source_out)
}
library(ggplot2)
library(dplyr)
library(plotly)
library(readxl)
library(tidyr)
library(ggthemes)
library(leaflet)
library(DT)
library(openxlsx)
library(data.table)
options(scipen=10000)
#setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source('colour_theme.r')
data_sources <- read.xlsx('Data sources.xlsx', sheet = "Sources") %>% as.data.table()
data_sources <- read.xlsx('Data sources.xlsx', sheet = "Sources") %>% as.data.table()
m <- list(
l = 5,#50,
r = 5,#50,
b = 10,#100,
t = 10,#100,
pad = 2#4
)
make_datatable <- function(dt, visual_name = "Population by sex", data_link_col = "Source data link"){
# htmltools::em
col_no <- ncol(dt) - 1
dt_out <- datatable(dt,
caption = htmltools::tags$caption(
style = 'caption-side: bottom; text-align: center;',
paste(c(data_sources[`Visual short name`== visual_name, Section], ":"),collapse=""),
htmltools::withTags(HTML(
paste(c(data_sources[`Visual short name`== visual_name,`Table commentary`], ". Latest data from ",
data_sources[`Visual short name`== visual_name,`Year (latest year in data)`],". Underlying data sourced from ",
data_sources[`Visual short name`== visual_name,`Source organisation`], " <a href=",
data_sources[`Visual short name`== visual_name, ..data_link_col],' target="_blank">',
"here</a>.")
),collapse=""))),
rownames = FALSE,
extensions = c('Buttons'),#, 'Scroller'),
options = list(
#dom = "ft",
pageLength = 500,
autoWidth=T,
columnDefs = list(list(width = '10%', targets = c(0:col_no))),
dom = 'Bfrti',
buttons = c('copy', 'csv', 'excel')#,
#deferRender = TRUE,
#scrollY = 200,
#scroller = T
))
return(dt_out)
}
make_theme_index <- function(data_sources_f = data_sources, section_name_f = section_name) {
internal_link_col = "Internal link"
theme_data <- data_sources_f[`Section name`== section_name_f]
source_out <- list()
for (i in 1:ncol(theme_data)){
source <-
paste(c("<a href=",theme_data[i, ..data_link_col],' target="_blank">',theme_data[i, `Visual short name`],"</a>.")
,collapse="")
source_out[i] <- source
}
#htmltools::withTags(HTML())
return(source_out)
}
make_theme_index(data_sources, "Financial stability")
names(data_sources)
names(data_sources) <- gsub("\\.", " ", names(data_sources))
make_theme_index(data_sources, "Financial stability")
make_theme_index <- function(data_sources_f = data_sources, section_name_f = section_name) {
internal_link_col = "Internal link"
theme_data <- data_sources_f[`Section`== section_name_f]
source_out <- list()
for (i in 1:ncol(theme_data)){
source <-
paste(c("<a href=",theme_data[i, ..data_link_col],' target="_blank">',theme_data[i, `Visual short name`],"</a>.")
,collapse="")
source_out[i] <- source
}
#htmltools::withTags(HTML())
return(source_out)
}
names(data_sources)
make_theme_index(data_sources, "Financial stability")
make_theme_index <- function(data_sources_f = data_sources, section_name_f = section_name) {
internal_link_col = "Internal link"
theme_data <- data_sources_f[`Section`== section_name_f]
source_out <- list()
for (i in 1:ncol(theme_data)){
source <-
paste(c("<a href=",theme_data[i, ..internal_link_col],' target="_blank">',theme_data[i, `Visual short name`],"</a>.")
,collapse="")
source_out[i] <- source
}
#htmltools::withTags(HTML())
return(source_out)
}
names(data_sources)
make_theme_index(data_sources, "Financial stability")
make_theme_index <- function(data_sources_f = data_sources, section_name_f = section_name) {
internal_link_col = "Internal link"
theme_data <- data_sources_f[`Section`== section_name_f]
source_out <- list()
for (i in 1:nrow(theme_data)){
source <-
paste(c("<a href=",theme_data[i, ..internal_link_col],' target="_blank">',theme_data[i, `Visual short name`],"</a>.")
,collapse="")
source_out[i] <- source
}
#htmltools::withTags(HTML())
return(source_out)
}
make_theme_index(data_sources, "Financial stability")
make_theme_index(data_sources, "Financial resilience")
fin_res <- make_theme_index(data_sources, "Financial resilience")
unlist(fin_res)
htmltools::withTags(HTML(unlist(fin_res)))
htmltools::withTags(htmltools::HTML(unlist(fin_res)))
library(flexdashboard)
library(ggplot2)
library(plotly)
library(DT)
library(shiny)
library(magrittr)
run_direct = F
source('data and charts.r')
source('colour_theme.r')
source('section_charts/key_demographics.r')
source('section_charts/jobs_earnings_business.r')
source('section_charts/education.r')
source('section_charts/environment.r')
source('section_charts/housing_infrastructure.r')
source('section_charts/crime_safety_justice.r')
source('section_charts/community.r')
source('section_charts/map_ward_key_demographics.r')
source('section_charts/Health.r')
source('section_charts/key_census_data.r')
previous_button = function(data_sources_f = data_sources, ref_name_f = ref_name) {
last_button <- actionButton(paste(c(data_sources_f[`Visual short name` == ref_name_f, `Internal link suffix`],"-last"),collapse=""), label = "Previous", class = "btn btn-lg btn-primary", icon = icon("chevron-left", lib = "glyphicon"),
onclick=paste(c("location.href='",data_sources_f[Number == (data_sources_f[`Visual short name` == ref_name_f, Number - 1]), `Internal link`],"';"), collapse = ""), width = "49%")
return(last_button)
}
next_button = function(data_sources_f = data_sources, ref_name_f = ref_name) {
nxt_button <- actionButton(paste(c(data_sources_f[`Visual short name` == ref_name_f, `Internal link suffix`],"-next"),collapse=""), label = "Next", class = "btn btn-lg btn-primary", icon = icon("chevron-right", lib = "glyphicon"),
onclick=paste(c("location.href='",data_sources_f[Number == (data_sources_f[`Visual short name` == ref_name_f, Number] + 1), `Internal link`],"';"), collapse = ""), width = "49%")
return(nxt_button)
}
get_source = function(data_sources_f = data_sources, ref_name_f = ref_name) {
data_link_col = "Source data link"
source_out <- htmltools::withTags(HTML(
paste(c("Data source: ", data_sources_f[`Visual short name`== ref_name_f,`Table commentary`], ". Latest data from ",
data_sources_f[`Visual short name`== ref_name_f,`Year (latest year in data)`],". Underlying data sourced from ",
data_sources_f[`Visual short name`== ref_name_f,`Source organisation`], " <a href=",
data_sources_f[`Visual short name`== ref_name_f, ..data_link_col],' target="_blank">',
"here</a>.")
),collapse=""))
return(source_out)
}
make_theme_index(data_sources, "Key demographics")
previous_button()
ref_name = "Key demographics introduction"
make_theme_index(data_sources, "Key demographics")
previous_button()
next_button()
make_theme_index <- function(data_sources_f = data_sources, section_name_f = section_name) {
internal_link_col = "Internal link"
theme_data <- data_sources_f[`Section`== section_name_f]
source_out <- list("<ul>")
for (i in 2:nrow(theme_data)+1){
source <-
paste(c("<li><a href=",theme_data[i, ..internal_link_col],' target="_blank">',theme_data[i, `Visual short name`],"</a></li>")
,collapse="")
source_out[i] <- source
}
source_out[nrow(theme_data)+2] <- "</ul>"
source_out_html = htmltools::withTags(htmltools::HTML(unlist(fin_res)))
return(source_out_html)
}
make_theme_index(data_sources, "Key demographics")
make_theme_index <- function(data_sources_f = data_sources, section_name_f = section_name) {
internal_link_col = "Internal link"
theme_data <- data_sources_f[`Section`== section_name_f]
source_out <- list("<ul>")
for (i in 2:nrow(theme_data)+1){
source <-
paste(c("<li><a href=",theme_data[i, ..internal_link_col],' target="_blank">',theme_data[i, `Visual short name`],"</a></li>")
,collapse="")
source_out[i] <- source
}
source_out[nrow(theme_data)+2] <- "</ul>"
source_out_html = htmltools::withTags(htmltools::HTML(unlist(fin_res)))
return(source_out_html)
}
make_theme_index(data_sources, "Key demographics")
make_theme_index <- function(data_sources_f = data_sources, section_name_f = section_name) {
internal_link_col = "Internal link"
theme_data <- data_sources_f[`Section`== section_name_f]
source_out <- list("<ul>")
for (i in 2:nrow(theme_data)+1){
source <-
paste(c("<li><a href=",theme_data[i, ..internal_link_col],' target="_blank">',theme_data[i, `Visual short name`],"</a></li>")
,collapse="")
source_out[i] <- source
}
source_out[nrow(theme_data)+2] <- "</ul>"
source_out_html = htmltools::withTags(htmltools::HTML(unlist(fin_res)))
return(source_out_html)
}
make_theme_index(data_sources, "Key demographics")
debug(make_theme_index)
make_theme_index(data_sources, "Key demographics")
View(theme_data)
View(source_out)
make_theme_index <- function(data_sources_f = data_sources, section_name_f = section_name) {
internal_link_col = "Internal link"
theme_data <- data_sources_f[`Section`== section_name_f]
source_out <- list("<ul>")
for (i in 2:nrow(theme_data)+1){
source <-
paste(c("<li><a href=",theme_data[i, ..internal_link_col],' target="_blank">',theme_data[i, `Visual short name`],"</a></li>")
,collapse="")
source_out[i] <- source
}
source_out[nrow(theme_data)+2] <- "</ul>"
source_out_html = htmltools::withTags(htmltools::HTML(unlist(source_out)))
return(source_out_html)
}
debug(make_theme_index)
undebug(make_theme_index)
make_theme_index(data_sources, "Key demographics")
for (i in 2:nrow(theme_data)){
source <-
paste(c("<li><a href=",theme_data[i, ..internal_link_col],' target="_blank">',theme_data[i, `Visual short name`],"</a></li>")
,collapse="")
source_out[i] <- source
}
make_theme_index <- function(data_sources_f = data_sources, section_name_f = section_name) {
internal_link_col = "Internal link"
theme_data <- data_sources_f[`Section`== section_name_f]
source_out <- list("<ul>")
for (i in 2:nrow(theme_data)){
source <-
paste(c("<li><a href=",theme_data[i, ..internal_link_col],' target="_blank">',theme_data[i, `Visual short name`],"</a></li>")
,collapse="")
source_out[i] <- source
}
source_out[nrow(theme_data)+2] <- "</ul>"
source_out_html = htmltools::withTags(htmltools::HTML(unlist(source_out)))
return(source_out_html)
}
undebug(make_theme_index)
make_theme_index(data_sources, "Key demographics")
make_theme_index <- function(data_sources_f = data_sources, section_name_f = section_name) {
internal_link_col = "Internal link"
theme_data <- data_sources_f[`Section`== section_name_f]
source_out <- list("<ul>")
for (i in 1:nrow(theme_data)){
source <-
paste(c("<li><a href=",theme_data[i, ..internal_link_col],' target="_blank">',theme_data[i, `Visual short name`],"</a></li>")
,collapse="")
source_out[i] <- source
}
source_out[nrow(theme_data)+2] <- "</ul>"
source_out_html = htmltools::withTags(htmltools::HTML(unlist(source_out)))
return(source_out_html)
}
undebug(make_theme_index)
make_theme_index(data_sources, "Key demographics")
make_theme_index <- function(data_sources_f = data_sources, section_name_f = section_name) {
internal_link_col = "Internal link"
theme_data <- data_sources_f[`Section`== section_name_f]
source_out <- list("<ul>")
for (i in 1:nrow(theme_data)){
source <-
paste(c("<li><a href=",theme_data[i, ..internal_link_col],' target="_blank">',theme_data[i, `Visual short name`],"</a></li>")
,collapse="")
source_out[i+1] <- source
}
source_out[nrow(theme_data)+2] <- "</ul>"
source_out_html = htmltools::withTags(htmltools::HTML(unlist(source_out)))
return(source_out_html)
}
make_theme_index(data_sources, "Key demographics")
make_theme_index(data_sources, "Key demographics")
previous_button()
next_button()
