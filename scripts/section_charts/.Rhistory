child_li_df_comb_time <- read_child_li_time(child_li)
# Present on a ggplotly graph
child_li_comparison_graph = ggplot(child_li_df_comb_time, aes(x = Year, y = `Percentage of children in low income households (%)`,
colour = Area, group = Area,
text= paste("Area: ", Area, "<br>",
"Year: ", Year, "<br>",
"Percentage of children in low income households (%): ", `Percentage of children in low income households (%)`, sep = ""))) +
geom_line()+#position = position_dodge(width = 0.9)) +
geom_point()+
scale_colour_discrete(type=lambeth_palette_graph) +
theme_lam() +
theme(axis.title.x = element_blank()) +
ylab("Percentage of children in low income households (%)") +
expand_limits(y=0)
ggplotly(child_li_comparison_graph)
child_li_reg_df[gsub("United Kingdom [note 4]", "United Kingdom", Area)]
child_li_reg_df[, Area := gsub("United Kingdom [note 4]", "United Kingdom", Area)]
child_li_reg_df
read_child_li_time <- function(child_li, cols = c("Local Authority [note 2]",  "Area Code",
"Number of children FYE 2022 [p]", "Percentage of children FYE 2022 (%) [p] [note 3]"), latest_year="2022") {
# Replace . in column names with " "
names(child_li) = gsub("\\.", " ", names(child_li))
#child_li_df <- child_li[, ..cols]
child_li_df <- melt(child_li, id.vars = c("Local Authority [note 2]",  "Area Code"))
names(child_li_df) <- c("Area", "Area Code", "Variable", "Percentage of children in low income households (%)")
child_li_df <- child_li_df[!grep("Number of", Variable)]
#child_li_df <- child_li_df[,`:=`(`Percentage of children in low income households (%)` = round(as.numeric(`Percentage of children in low income households (%)`) * 100,1))]
child_li_df_lam <- child_li_df[Area=="Lambeth"]
child_li_df_lam <- child_li_df_lam[,`Area Code` := NULL]
# London
# Replace . in column names with " "
names(child_li_reg) = gsub("\\.", " ", names(child_li_reg))
child_li_reg_df <- melt(child_li_reg, id.vars = c("Government Office Region [note 4]",  "Area Code"))
names(child_li_reg_df) <- c("Area", "Area Code", "Variable", "Percentage of children in low income households (%)")
child_li_reg_df <- child_li_reg_df[!grep("Number of", Variable)]
#child_li_reg_df <- child_li_reg[,c("Government Office Region [note 4]",  "Area Code",
#                                   "Number of children FYE 2022 [p]", "Percentage of children FYE 2022 #(%) [p] [note 3]")]
#child_li_df_lon <- child_li_df[grep("^E09", `Area Code`)]
child_li_df_lon <- child_li_reg_df[Area == "London"]
#child_li_df_lon <- melt(child_li_df_lon, id.vars = c("Area",  "Area Code"))
#child_li_df_lon_g <- child_li_df_lon[,.(`Percentage of children in low income households (%)` = mean(`Percentage of children in low income households (%)`),
#                                        Area = "London"), by = .(Variable)]
# England
#child_li_df_eng <- child_li_df[grep("^E", `Area Code`)]
child_li_df_eng <- child_li_reg_df[Area == "United Kingdom [note 4]"]
child_li_reg_df[, Area := gsub("United Kingdom [note 4]", "United Kingdom", Area)]
#child_li_df_eng_g <- child_li_df_eng[,.(`Number of children in low income households` = sum(`Number of children in low income households`),
#                                         `Percentage of children in low income households (%)` = mean(`Percentage of children in low income households (%)`),
#                                        Area = "United Kingdom"), by = .(Variable)]
# Combine
child_li_df_comb <- rbindlist(list(child_li_df_lon,child_li_df_eng, child_li_df_lam), use.names = T, fill = T)
child_li_df_comb[, Year:= as.integer(stringr::str_extract(Variable, "\\d\\d\\d\\d"))]
# Make Area name an ordered factor with Lambeth, London, England
child_li_df_comb[, Area := ordered(Area, levels = c("Lambeth", "London", "United Kingdom"))]
child_li_df_comb[,`Percentage of children in low income households (%)`:=round(as.numeric(`Percentage of children in low income households (%)`)*100,1)]
return(child_li_df_comb)
}
child_li_df_comb_time <- read_child_li_time(child_li)
# Present on a ggplotly graph
child_li_comparison_graph_time = ggplot(child_li_df_comb_time, aes(x = Year, y = `Percentage of children in low income households (%)`,
colour = Area, group = Area,
text= paste("Area: ", Area, "<br>",
"Year: ", Year, "<br>",
"Percentage of children in low income households (%): ", `Percentage of children in low income households (%)`, sep = ""))) +
geom_line()+#position = position_dodge(width = 0.9)) +
geom_point()+
scale_colour_discrete(type=lambeth_palette_graph) +
theme_lam() +
theme(axis.title.x = element_blank()) +
ylab("Percentage of children in low income households (%)") +
expand_limits(y=0)
ggplotly(child_li_comparison_graph_time)
child_li <- read.xlsx(paste(c(dir_stub, "../data/Financial stability/children-in-low-income-families-local-area-statistics-2014-to-2022.xlsx"),collapse = ''),
sheet = "3_Relative_Local_Authority", startRow = 10) %>% as.data.table()
child_li_reg <- read.xlsx(paste(c(dir_stub, "../data/Financial stability/children-in-low-income-families-local-area-statistics-2014-to-2022.xlsx"),collapse = ''),
sheet = "1_Relative_Gov_Office_Region", startRow = 10) %>% as.data.table()
read_child_li <- function(child_li, cols = c("Local Authority [note 2]",  "Area Code",
"Number of children FYE 2022 [p]", "Percentage of children FYE 2022 (%) [p] [note 3]"), latest_year="2022") {
# Replace . in column names with " "
names(child_li) = gsub("\\.", " ", names(child_li))
child_li_df <- child_li[, ..cols]
names(child_li_df) <- c("Area", "Area Code", "Number of children in low income households", "Percentage of children in low income households (%)")
child_li_df <- child_li_df[,`:=`(`Percentage of children in low income households (%)` = as.numeric(`Percentage of children in low income households (%)`),
`Number of children in low income households` = as.numeric(`Number of children in low income households`)
)]
child_li_df_lam <- child_li_df[Area=="Lambeth"]
child_li_df_lam <- child_li_df_lam[,`Area Code` := NULL]
# London
# Replace . in column names with " "
names(child_li_reg) = gsub("\\.", " ", names(child_li_reg))
child_li_reg_df <- child_li_reg[,c("Government Office Region [note 4]",  "Area Code",
"Number of children FYE 2022 [p]", "Percentage of children FYE 2022 (%) [p] [note 3]")]
names(child_li_reg_df) <- c("Area", "Area Code", "Number of children in low income households", "Percentage of children in low income households (%)")
#child_li_df_lon <- child_li_df[grep("^E09", `Area Code`)]
child_li_df_lon <- child_li_reg_df[Area == "London"]
child_li_df_lon_g <- child_li_df_lon[,.(`Number of children in low income households` = sum(`Number of children in low income households`),
`Percentage of children in low income households (%)` = mean(`Percentage of children in low income households (%)`),
Area = "London"
)]
# England
#child_li_df_eng <- child_li_df[grep("^E", `Area Code`)]
child_li_df_eng <- child_li_reg_df[Area == "United Kingdom [note 4]"]
child_li_df_eng_g <- child_li_df_eng[,.(`Number of children in low income households` = sum(`Number of children in low income households`),
`Percentage of children in low income households (%)` = mean(`Percentage of children in low income households (%)`),
Area = "United Kingdom"
)]
# Combine
child_li_df_comb <- rbindlist(list(child_li_df_lon_g,child_li_df_eng_g, child_li_df_lam), use.names = T, fill = T)
child_li_df_comb$Year <- latest_year
# Make Area name an ordered factor with Lambeth, London, England
child_li_df_comb[, Area := ordered(Area, levels = c("Lambeth", "London", "United Kingdom"))]
child_li_df_comb[,`Percentage of children in low income households (%)`:=round(as.numeric(`Percentage of children in low income households (%)`) * 100,1)]
return(child_li_df_comb)
}
child_li_df_comb <- read_child_li(child_li)
# Present on a ggplotly graph
child_li_comparison_graph = ggplot(child_li_df_comb, aes(x = Area, y = `Percentage of children in low income households (%)`,
fill = Area,
text= paste("Area: ", Area, "<br>",
"Year: ", Year, "<br>",
"Percentage of children in low income households (%): ", `Percentage of children in low income households (%)`, sep = ""))) +
geom_col(position = position_dodge(width = 0.9)) +
scale_fill_discrete(type=lambeth_palette_graph) +
theme_lam() +
theme(axis.title.x = element_blank()) +
ylab("Percentage of children in low income households (%)") +
expand_limits(y=0)
child_li_comparison_graph
#ggplotly(child_li_comparison_graph)
read_child_li_time <- function(child_li, cols = c("Local Authority [note 2]",  "Area Code",
"Number of children FYE 2022 [p]", "Percentage of children FYE 2022 (%) [p] [note 3]"), latest_year="2022") {
# Replace . in column names with " "
names(child_li) = gsub("\\.", " ", names(child_li))
#child_li_df <- child_li[, ..cols]
child_li_df <- melt(child_li, id.vars = c("Local Authority [note 2]",  "Area Code"))
names(child_li_df) <- c("Area", "Area Code", "Variable", "Percentage of children in low income households (%)")
child_li_df <- child_li_df[!grep("Number of", Variable)]
#child_li_df <- child_li_df[,`:=`(`Percentage of children in low income households (%)` = round(as.numeric(`Percentage of children in low income households (%)`) * 100,1))]
child_li_df_lam <- child_li_df[Area=="Lambeth"]
child_li_df_lam <- child_li_df_lam[,`Area Code` := NULL]
# London
# Replace . in column names with " "
names(child_li_reg) = gsub("\\.", " ", names(child_li_reg))
child_li_reg_df <- melt(child_li_reg, id.vars = c("Government Office Region [note 4]",  "Area Code"))
names(child_li_reg_df) <- c("Area", "Area Code", "Variable", "Percentage of children in low income households (%)")
child_li_reg_df <- child_li_reg_df[!grep("Number of", Variable)]
#child_li_reg_df <- child_li_reg[,c("Government Office Region [note 4]",  "Area Code",
#                                   "Number of children FYE 2022 [p]", "Percentage of children FYE 2022 #(%) [p] [note 3]")]
#child_li_df_lon <- child_li_df[grep("^E09", `Area Code`)]
child_li_df_lon <- child_li_reg_df[Area == "London"]
#child_li_df_lon <- melt(child_li_df_lon, id.vars = c("Area",  "Area Code"))
#child_li_df_lon_g <- child_li_df_lon[,.(`Percentage of children in low income households (%)` = mean(`Percentage of children in low income households (%)`),
#                                        Area = "London"), by = .(Variable)]
# England
#child_li_df_eng <- child_li_df[grep("^E", `Area Code`)]
child_li_df_eng <- child_li_reg_df[Area == "United Kingdom [note 4]"]
child_li_reg_df[, Area := gsub("United Kingdom [note 4]", "United Kingdom", Area)]
#child_li_df_eng_g <- child_li_df_eng[,.(`Number of children in low income households` = sum(`Number of children in low income households`),
#                                         `Percentage of children in low income households (%)` = mean(`Percentage of children in low income households (%)`),
#                                        Area = "United Kingdom"), by = .(Variable)]
# Combine
child_li_df_comb <- rbindlist(list(child_li_df_lon,child_li_df_eng, child_li_df_lam), use.names = T, fill = T)
child_li_df_comb[, Year:= as.integer(stringr::str_extract(Variable, "\\d\\d\\d\\d"))]
# Make Area name an ordered factor with Lambeth, London, England
child_li_df_comb[, Area := ordered(Area, levels = c("Lambeth", "London", "United Kingdom"))]
child_li_df_comb[,`Percentage of children in low income households (%)`:=round(as.numeric(`Percentage of children in low income households (%)`)*100,1)]
return(child_li_df_comb)
}
child_li_df_comb_time <- read_child_li_time(child_li)
# Present on a ggplotly graph
child_li_comparison_graph_time = ggplot(child_li_df_comb_time, aes(x = Year, y = `Percentage of children in low income households (%)`,
colour = Area, group = Area,
text= paste("Area: ", Area, "<br>",
"Year: ", Year, "<br>",
"Percentage of children in low income households (%): ", `Percentage of children in low income households (%)`, sep = ""))) +
geom_line()+#position = position_dodge(width = 0.9)) +
geom_point()+
scale_colour_discrete(type=lambeth_palette_graph) +
theme_lam() +
theme(axis.title.x = element_blank()) +
ylab("Percentage of children in low income households (%)") +
expand_limits(y=0)
ggplotly(child_li_comparison_graph_time)
read_child_li_time <- function(child_li, cols = c("Local Authority [note 2]",  "Area Code",
"Number of children FYE 2022 [p]", "Percentage of children FYE 2022 (%) [p] [note 3]"), latest_year="2022") {
# Replace . in column names with " "
names(child_li) = gsub("\\.", " ", names(child_li))
#child_li_df <- child_li[, ..cols]
child_li_df <- melt(child_li, id.vars = c("Local Authority [note 2]",  "Area Code"))
names(child_li_df) <- c("Area", "Area Code", "Variable", "Percentage of children in low income households (%)")
child_li_df <- child_li_df[!grep("Number of", Variable)]
#child_li_df <- child_li_df[,`:=`(`Percentage of children in low income households (%)` = round(as.numeric(`Percentage of children in low income households (%)`) * 100,1))]
child_li_df_lam <- child_li_df[Area=="Lambeth"]
child_li_df_lam <- child_li_df_lam[,`Area Code` := NULL]
# London
# Replace . in column names with " "
names(child_li_reg) = gsub("\\.", " ", names(child_li_reg))
child_li_reg_df <- melt(child_li_reg, id.vars = c("Government Office Region [note 4]",  "Area Code"))
names(child_li_reg_df) <- c("Area", "Area Code", "Variable", "Percentage of children in low income households (%)")
child_li_reg_df <- child_li_reg_df[!grep("Number of", Variable)]
#child_li_reg_df <- child_li_reg[,c("Government Office Region [note 4]",  "Area Code",
#                                   "Number of children FYE 2022 [p]", "Percentage of children FYE 2022 #(%) [p] [note 3]")]
#child_li_df_lon <- child_li_df[grep("^E09", `Area Code`)]
child_li_df_lon <- child_li_reg_df[Area == "London"]
#child_li_df_lon <- melt(child_li_df_lon, id.vars = c("Area",  "Area Code"))
#child_li_df_lon_g <- child_li_df_lon[,.(`Percentage of children in low income households (%)` = mean(`Percentage of children in low income households (%)`),
#                                        Area = "London"), by = .(Variable)]
# England
#child_li_df_eng <- child_li_df[grep("^E", `Area Code`)]
child_li_df_eng <- child_li_reg_df[Area == "United Kingdom [note 4]"]
child_li_df_eng[, Area := gsub("United Kingdom [note 4]", "United Kingdom", Area)]
#child_li_df_eng_g <- child_li_df_eng[,.(`Number of children in low income households` = sum(`Number of children in low income households`),
#                                         `Percentage of children in low income households (%)` = mean(`Percentage of children in low income households (%)`),
#                                        Area = "United Kingdom"), by = .(Variable)]
# Combine
child_li_df_comb <- rbindlist(list(child_li_df_lon,child_li_df_eng, child_li_df_lam), use.names = T, fill = T)
child_li_df_comb[, Year:= as.integer(stringr::str_extract(Variable, "\\d\\d\\d\\d"))]
# Make Area name an ordered factor with Lambeth, London, England
child_li_df_comb[, Area := ordered(Area, levels = c("Lambeth", "London", "United Kingdom"))]
child_li_df_comb[,`Percentage of children in low income households (%)`:=round(as.numeric(`Percentage of children in low income households (%)`)*100,1)]
return(child_li_df_comb)
}
child_li_df_comb_time <- read_child_li_time(child_li)
# Present on a ggplotly graph
child_li_comparison_graph_time = ggplot(child_li_df_comb_time, aes(x = Year, y = `Percentage of children in low income households (%)`,
colour = Area, group = Area,
text= paste("Area: ", Area, "<br>",
"Year: ", Year, "<br>",
"Percentage of children in low income households (%): ", `Percentage of children in low income households (%)`, sep = ""))) +
geom_line()+#position = position_dodge(width = 0.9)) +
geom_point()+
scale_colour_discrete(type=lambeth_palette_graph) +
theme_lam() +
theme(axis.title.x = element_blank()) +
ylab("Percentage of children in low income households (%)") +
expand_limits(y=0)
ggplotly(child_li_comparison_graph_time)
ggplotly(child_li_comparison_graph_time)
# Replace . in column names with " "
names(child_li) = gsub("\\.", " ", names(child_li))
#child_li_df <- child_li[, ..cols]
child_li_df <- melt(child_li, id.vars = c("Local Authority [note 2]",  "Area Code"))
names(child_li_df) <- c("Area", "Area Code", "Variable", "Percentage of children in low income households (%)")
child_li_df <- child_li_df[!grep("Number of", Variable)]
#child_li_df <- child_li_df[,`:=`(`Percentage of children in low income households (%)` = round(as.numeric(`Percentage of children in low income households (%)`) * 100,1))]
child_li_df_lam <- child_li_df[Area=="Lambeth"]
child_li_df_lam <- child_li_df_lam[,`Area Code` := NULL]
# London
# Replace . in column names with " "
names(child_li_reg) = gsub("\\.", " ", names(child_li_reg))
child_li_reg_df <- melt(child_li_reg, id.vars = c("Government Office Region [note 4]",  "Area Code"))
names(child_li_reg_df) <- c("Area", "Area Code", "Variable", "Percentage of children in low income households (%)")
child_li_reg_df <- child_li_reg_df[!grep("Number of", Variable)]
#child_li_reg_df <- child_li_reg[,c("Government Office Region [note 4]",  "Area Code",
#                                   "Number of children FYE 2022 [p]", "Percentage of children FYE 2022 #(%) [p] [note 3]")]
#child_li_df_lon <- child_li_df[grep("^E09", `Area Code`)]
child_li_df_lon <- child_li_reg_df[Area == "London"]
#child_li_df_lon <- melt(child_li_df_lon, id.vars = c("Area",  "Area Code"))
#child_li_df_lon_g <- child_li_df_lon[,.(`Percentage of children in low income households (%)` = mean(`Percentage of children in low income households (%)`),
#                                        Area = "London"), by = .(Variable)]
# England
#child_li_df_eng <- child_li_df[grep("^E", `Area Code`)]
child_li_df_eng <- child_li_reg_df[Area == "United Kingdom [note 4]"]
hild_li_df_eng
child_li_df_eng
child_li_df_eng[, Area := gsub("United Kingdom [note 4]", "United Kingdom", Area)]
child_li_df_eng
child_li_df_eng[, Area := gsub("United Kingdom [note 4]", "United Kingdom", Area, fixed=T)]
child_li_df_eng
read_child_li_time <- function(child_li, cols = c("Local Authority [note 2]",  "Area Code",
"Number of children FYE 2022 [p]", "Percentage of children FYE 2022 (%) [p] [note 3]"), latest_year="2022") {
# Replace . in column names with " "
names(child_li) = gsub("\\.", " ", names(child_li))
#child_li_df <- child_li[, ..cols]
child_li_df <- melt(child_li, id.vars = c("Local Authority [note 2]",  "Area Code"))
names(child_li_df) <- c("Area", "Area Code", "Variable", "Percentage of children in low income households (%)")
child_li_df <- child_li_df[!grep("Number of", Variable)]
#child_li_df <- child_li_df[,`:=`(`Percentage of children in low income households (%)` = round(as.numeric(`Percentage of children in low income households (%)`) * 100,1))]
child_li_df_lam <- child_li_df[Area=="Lambeth"]
child_li_df_lam <- child_li_df_lam[,`Area Code` := NULL]
# London
# Replace . in column names with " "
names(child_li_reg) = gsub("\\.", " ", names(child_li_reg))
child_li_reg_df <- melt(child_li_reg, id.vars = c("Government Office Region [note 4]",  "Area Code"))
names(child_li_reg_df) <- c("Area", "Area Code", "Variable", "Percentage of children in low income households (%)")
child_li_reg_df <- child_li_reg_df[!grep("Number of", Variable)]
#child_li_reg_df <- child_li_reg[,c("Government Office Region [note 4]",  "Area Code",
#                                   "Number of children FYE 2022 [p]", "Percentage of children FYE 2022 #(%) [p] [note 3]")]
#child_li_df_lon <- child_li_df[grep("^E09", `Area Code`)]
child_li_df_lon <- child_li_reg_df[Area == "London"]
#child_li_df_lon <- melt(child_li_df_lon, id.vars = c("Area",  "Area Code"))
#child_li_df_lon_g <- child_li_df_lon[,.(`Percentage of children in low income households (%)` = mean(`Percentage of children in low income households (%)`),
#                                        Area = "London"), by = .(Variable)]
# England
#child_li_df_eng <- child_li_df[grep("^E", `Area Code`)]
child_li_df_eng <- child_li_reg_df[Area == "United Kingdom [note 4]"]
child_li_df_eng[, Area := gsub("United Kingdom [note 4]", "United Kingdom", Area, fixed=T)]
#child_li_df_eng_g <- child_li_df_eng[,.(`Number of children in low income households` = sum(`Number of children in low income households`),
#                                         `Percentage of children in low income households (%)` = mean(`Percentage of children in low income households (%)`),
#                                        Area = "United Kingdom"), by = .(Variable)]
# Combine
child_li_df_comb <- rbindlist(list(child_li_df_lon,child_li_df_eng, child_li_df_lam), use.names = T, fill = T)
child_li_df_comb[, Year:= as.integer(stringr::str_extract(Variable, "\\d\\d\\d\\d"))]
# Make Area name an ordered factor with Lambeth, London, England
child_li_df_comb[, Area := ordered(Area, levels = c("Lambeth", "London", "United Kingdom"))]
child_li_df_comb[,`Percentage of children in low income households (%)`:=round(as.numeric(`Percentage of children in low income households (%)`)*100,1)]
return(child_li_df_comb)
}
child_li_df_comb_time <- read_child_li_time(child_li)
child_li_df_comb_time
child_li_df_comb_time
# Present on a ggplotly graph
child_li_comparison_graph_time = ggplot(child_li_df_comb_time, aes(x = Year, y = `Percentage of children in low income households (%)`,
colour = Area, group = Area,
text= paste("Area: ", Area, "<br>",
"Year: ", Year, "<br>",
"Percentage of children in low income households (%): ", `Percentage of children in low income households (%)`, sep = ""))) +
geom_line()+#position = position_dodge(width = 0.9)) +
geom_point()+
scale_colour_discrete(type=lambeth_palette_graph) +
theme_lam() +
theme(axis.title.x = element_blank()) +
ylab("Percentage of children in low income households (%)") +
expand_limits(y=0)
ggplotly(child_li_comparison_graph_time)
fuel_all_perc_lsoa <- read.xlsx(paste(c(dir_stub, "../data/Financial stability/sub-regional-fuel-poverty-2022-tables.xlsx"),collapse = ''),
sheet = "Table 3", startRow = 3) %>% as.data.table()
# Replace . in column names with " "
names(fuel_all_perc_lsoa) = gsub("\\.", " ", names(fuel_all_perc_lsoa))
fuel_all_perc_lsoa_lam <- fuel_all_perc_lsoa[`LA Name` == "Lambeth"]
# Combined
#fuel_all_ages <- rbindlist(list(fuel_latest_1624, fuel_latest_2549, fuel_latest_50))
#setnames(fuel_all_perc_lsoa, "Value", "fuelant count rate (%)", skip_absent = T)
#fuel_all_perc_lsoa_2022 <- fuel_all_perc_lsoa[Date > as.Date("2023-01-01")]
#ordered_areas <- fuel_all_perc_lsoa_2022[order(fuel_all_perc_lsoa_2022, -`fuelant count rate (%)`),Area] %>% unique()
#fuel_all_perc_lsoa[, `:=`(Area = ordered(Area, levels=ordered_areas),
##                      `fuelant count rate (%)` = as.numeric(`fuelant count rate (%)`)
#)]
names(fuel_all_perc_lsoa_lam)
setnames(fuel_all_perc_lsoa_lam, "Proportion of households fuel poor (%)", "Proportion of households in fuel poverty (%)")
fuel_all_perc_lsoa_lam[, `:=`(`Proportion of households in fuel poverty (%)` = as.numeric(`Proportion of households in fuel poverty (%)`))]
### Summarise to Ward to make ward map
lsoa_to_country_lam <- fread(paste(c(dir_stub, "../data/Map/lsoa_to_country_2019_lambeth.csv"),collapse = ''))
lsoa_to_country_lam_l <- lsoa_to_country_lam[,c("lsoa11cd", "lsoa11nm", "wd19cd", "wd19nm")]
fuel_all_perc_wd_lam <- merge(fuel_all_perc_lsoa_lam, lsoa_to_country_lam_l, by.x = "LSOA Code", by.y= "lsoa11cd", how = "left")
fuel_all_perc_wd_lam <- group_by(fuel_all_perc_wd_lam, `wd19nm`) %>% summarise(`Proportion of households in fuel poverty (%)` = mean(`Proportion of households in fuel poverty (%)`, na.rm=T)) %>% as.data.table()
### For use with ward map
fuel_all_perc_wd_lam_2022 <- fuel_all_perc_wd_lam
ordered_areas <- fuel_all_perc_wd_lam_2022[order(fuel_all_perc_wd_lam_2022, -`Proportion of households in fuel poverty (%)`),`wd19nm`] %>% unique()
fuel_all_perc_wd_lam[, `:=`(`wd19nm` = ordered(`wd19nm`, levels=ordered_areas))]
# Present on a ggplotly graph
fuel_all_perc_wd_graph = ggplot(fuel_all_perc_wd_lam,
aes(x = `wd19nm`, y = `Proportion of households in fuel poverty (%)`,
fill = `wd19nm`,
text= paste("wd19nm: ", `wd19nm`, "<br>",
"Proportion of households in fuel poverty (%): ", `Proportion of households in fuel poverty (%)`, sep = "")#,
)) +
geom_col(position = position_dodge(width = 0.9)) +
#geom_point()+
scale_fill_discrete(type=lambeth_palette_graph) +
theme_lam() +
theme(axis.title.x = element_blank(), legend.position = "None") +
ylab("Proportion of households in fuel poverty (%)") #+
#facet_wrap(~Age)
fuel_all_perc_wd_graph
fuel_all_perc_wd_graph
fuel_all_perc_lsoa_lam_2022 <- fuel_all_perc_lsoa_lam
ordered_areas <- fuel_all_perc_lsoa_lam_2022[order(fuel_all_perc_lsoa_lam_2022, -`Proportion of households in fuel poverty (%)`),`LSOA Name`] %>% unique()
fuel_all_perc_lsoa_lam[, `:=`(`LSOA Name` = ordered(`LSOA Name`, levels=ordered_areas))]
# Present on a ggplotly graph
fuel_all_perc_lsoa_graph = ggplot(fuel_all_perc_lsoa_lam,
aes(x = `LSOA Name`, y = `Proportion of households in fuel poverty (%)`,
fill = `LSOA Name`,
text= paste("LSOA Name: ", `LSOA Name`, "<br>",
"Proportion of households in fuel poverty (%): ", `Proportion of households in fuel poverty (%)`, sep = "")#,
)) +
geom_col(position = position_dodge(width = 0.9)) +
#geom_point()+
scale_fill_discrete(type=lambeth_palette_graph) +
theme_lam() +
theme(axis.title.x = element_blank(), legend.position = "None") +
ylab("Proportion of households in fuel poverty (%)") #+
#facet_wrap(~Age)
fuel_all_perc_lsoa_graph
#ggplotly(fuel_all_perc_lsoa_graph_lam)
names(fuel_all_perc_lsoa)
fuel_all_perc_lsoa_lam$Variable = "Fuel poverty 2020"
### Prepare spatial data
# vor_intersect_sf$pasted_location <- with(vor_intersect_sf, paste(longitude, latitude, sep = " "))
wards_sf_old_j_fuel <- merge(lsoamap_old, fuel_all_perc_lsoa_lam, by.x = "geo_code", by.y = "LSOA Code", all.x = T)
wards_sf_old_j_fuel
setnames(wards_sf_old_j_fuel, "geo_label", "WARD_NAME")
wards_sf_old_j_fuel$Theme = "Fuel poverty"
#wards_sf_old_j_fuel$`Area Code` = NULL
#names(wards_sf_old_j_fuel)[names(wards_sf_old_j_fuel) == "Variable"] = "Variable name"
#names(wards_sf_old_j_fuel)[names(wards_sf_old_j_fuel) == "Date"] = "Variable"
wards_sf_old_j_fuel$Variable = as.factor(wards_sf_old_j_fuel$Variable)
wards_sf_old_j_sp_fuel <-  as(wards_sf_old_j_fuel, 'Spatial')
names(wards_sf_old_j_sp_fuel@data) = stringr::str_trim(gsub("\\.", " ", names(wards_sf_old_j_sp_fuel@data)))
# Map variables to return to rmd
welcome_popup_fuel <- welcome_popup(theme = unique(wards_sf_old_j_fuel$Theme), year = "2021")
# Sort variable by mean percentage, remove 'All usual residents'
descending_sort_vars_fuel <- group_by(wards_sf_old_j_sp_fuel@data, `Variable`) %>% summarise(Mean = mean(`Proportion of households in fuel poverty`, na.rm=T)) %>% arrange(desc(Variable))
descending_sort_vars_not_all_fuel <- descending_sort_vars_fuel$Variable
undebug(apply_metric_area)
list_out_fuel <- apply_metric_area(wards_sf_old_j_sp_fuel, variable_name = descending_sort_vars_not_all_fuel, value_name = "Proportion of households in fuel poverty")
wards_sf_old_j_sp_out_fuel <- list_out_fuel[[1]]
ward_metric_numbers_fuel <- list_out_fuel[[2]]
sd_ward_fuel <- list_out_fuel[[3]]
sd_df_ward_fuel <- list_out_fuel[[4]]
ward_map_simple(map_df = wards_sf_old_j_sp_out_fuel, variable_name = descending_sort_vars_not_all_fuel, popup = welcome_popup_fuel)
# Present on a ggplotly graph
fuel_li_comparison_graph = ggplot(fuel_li_df_comb, aes(x = Area, y = `Proportion of households in fuel poverty (%)`,
fill = Area,
text= paste("Area: ", Area, "<br>",
"Year: ", Year, "<br>",
"Proportion of households in fuel poverty (%): ", `Proportion of households in fuel poverty (%)`, sep = ""))) +
geom_col(position = position_dodge(width = 0.9)) +
scale_fill_discrete(type=lambeth_palette_graph) +
theme_lam() +
theme(axis.title.x = element_blank()) +
ylab("Proportion of households in fuel poverty (%)") +
expand_limits(y=0)
fuel_li_df_comb <- rbindlist(list(fuel_all_perc_lam,fuel_all_perc_lon, fuel_all_perc_eng))
fuel_li_df_comb
fuel_all_perc
fuel_all_perc_lam <- fuel_all_perc[ grep("Lambeth", `X4`)]
fuel_all_perc_lam
fuel_all_perc_lam <- fuel_all_perc[ grep("Lambeth", `X4`)]
fuel_all_perc_eng <- fuel_all_perc[`Area names` == "ENGLAND"]
fuel_all_perc_lon <- fuel_all_perc[`Area names` == "LONDON"]
fuel_li_df_comb <- rbindlist(list(fuel_all_perc_lam,fuel_all_perc_lon, fuel_all_perc_eng))
fuel_li_df_comb[,Area:= ordered(c("Lambeth","London", "England"), levels = c("Lambeth","London", "England"))]
# Present on a ggplotly graph
fuel_li_comparison_graph = ggplot(fuel_li_df_comb, aes(x = Area, y = `Proportion of households in fuel poverty (%)`,
fill = Area,
text= paste("Area: ", Area, "<br>",
"Year: ", Year, "<br>",
"Proportion of households in fuel poverty (%): ", `Proportion of households in fuel poverty (%)`, sep = ""))) +
geom_col(position = position_dodge(width = 0.9)) +
scale_fill_discrete(type=lambeth_palette_graph) +
theme_lam() +
theme(axis.title.x = element_blank()) +
ylab("Proportion of households in fuel poverty (%)") +
expand_limits(y=0)
fuel_li_comparison_graph
fuel_li_df_comb[,Year:="2020"]
# Present on a ggplotly graph
fuel_li_comparison_graph = ggplot(fuel_li_df_comb, aes(x = Area, y = `Proportion of households in fuel poverty (%)`,
fill = Area,
text= paste("Area: ", Area, "<br>",
"Year: ", Year, "<br>",
"Proportion of households in fuel poverty (%): ", `Proportion of households in fuel poverty (%)`, sep = ""))) +
geom_col(position = position_dodge(width = 0.9)) +
scale_fill_discrete(type=lambeth_palette_graph) +
theme_lam() +
theme(axis.title.x = element_blank()) +
ylab("Proportion of households in fuel poverty (%)") +
expand_limits(y=0)
fuel_li_comparison_graph
library(flexdashboard)
library(ggplot2)
library(plotly)
library(DT)
library(shiny)
library(magrittr)
library(htmltools)
run_direct = F
source('colour_theme.r')
source('data and charts.r')
library(flexdashboard)
library(ggplot2)
library(plotly)
library(DT)
library(shiny)
library(magrittr)
library(htmltools)
run_direct = F
source('colour_theme.r')
source('data and charts.r')
# Load packages, functions ------------------------------------------------
library(ggplot2)
library(dplyr)
library(plotly)
library(readxl)
library(tidyr)
library(ggthemes)
library(leaflet)
library(DT)
library(openxlsx)
library(data.table)
options(scipen=10000)
#setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source('colour_theme.r')
data_sources <- read.xlsx('Data sources.xlsx', sheet = "Sources") %>% as.data.table()
library(flexdashboard)
library(ggplot2)
library(plotly)
library(DT)
library(shiny)
library(magrittr)
library(htmltools)
run_direct = F
source('colour_theme.r')
source('data and charts.r')
source('section_charts/key_demographics.r')
source('section_charts/map_ward_key_demographics.r')
source('section_charts/key_census_data.r')
source('section_charts/Health.r')
source('section_charts/jobs_earnings_business.r')
fuel_all_perc <- read.xlsx(paste(c(dir_stub, "../data/Financial stability/sub-regional-fuel-poverty-2022-tables.xlsx"),collapse = ''),
sheet = "Table 2", startRow = 3) %>% as.data.table()
