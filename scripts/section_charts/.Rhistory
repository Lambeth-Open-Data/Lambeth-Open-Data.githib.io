install.packages(c("cachem", "leaflet"))
# Load packages, initial variables ----------------------------------------
require(ggplot2)
require(plotly)
require(data.table)
require(rstudioapi)
#require(xlsx)
#library(readxl)
library(openxlsx)
#library(gglaplot)
# Not in function from here: https://stackoverflow.com/questions/5831794/opposite-of-in
'%!in%' <- function(x,y)!('%in%'(x,y))
# The following should be true when testing this file. When knitting the report together and sourcing externally, set this to false
if (!exists("run_direct")){run_direct=T}
if (run_direct == F){dir_stub = ''
} else if (run_direct == T){
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
dir_stub = '../'
source(paste(c(dir_stub, 'colour_theme.r'),collapse = ''))
}
# Some graph parameters
adj = 0.01
label_size = 6
graph_height = 3.5 # inches
graph_aspect_ratio = 0.75 # ratio between height/width
# Some map parameters
uk_lat = 51.46593
uk_lng = -0.10652
# Make a leaflet map
require(leaflet)
require(leaflet.extras)
require(sf)
require(rgdal)
require(htmltools)
require(crosstalk)
# Loading some spatial projections
wgs84 = '+proj=longlat +ellps=WGS84 +datum=WGS84'
bng = '+proj=tmerc +lat_0=49 +lon_0=-2 +k=0.999601272 +x_0=400000 +y_0=-100000 +datum=OSGB36 +units=m +no_defs +ellps=airy +towgs84=446.448,-125.157,542.060,0.1502,0.2470,0.8421,-20.4894'
mrc = '+proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0 +k=1.0 +units=m +nadgrids=@null +wktext +no_defs'
#
prj.wgs84 <- CRS(wgs84)
prj.bng <- CRS(bng)
prj.mrc <- CRS(mrc)
# Simplify ward outlines - only needed to do once
# require(rmapshaper)
#
# wards_sf <- read_sf("new_lambeth_wards_wgs84_riverclipped.geojson")
# # proj4string(wards_ni_sp)
#
# wards_sf_simple <- rmapshaper::ms_simplify(input = wards_sf, keep_shapes = T, keep = 0.01)
#
# write_sf(wards_sf_simple, paste(c(dir_stub, "../data/Map/new_lambeth_wards_wgs84_riverclipped_simple.geojson"),collapse = ''), delete_dsn = T)
# Simplify borough outlines - only needed to do once
# require(rmapshaper)
#
# borough_sf <- read_sf("LondonBoroughs.geojson")
# # proj4string(wards_ni_sp)
#
# borough_sf_simple <- rmapshaper::ms_simplify(input = borough_sf, keep_shapes = T, keep = 0.01)
#
# write_sf(borough_sf_simple, paste(c(dir_stub, "../data/Map/LondonBoroughs_simple.geojson"),collapse = ''), delete_dsn = T)
###
# Simplify ward outlines - only needed to do once
# require(rmapshaper)
#
# wards_sf <- read_sf(paste(c(dir_stub, "../data/Map/Lambeth_2021_Lower_Super_Output_Areas.geojson"),collapse = ''))
# # proj4string(wards_ni_sp)
#
# wards_sf_simple <- rmapshaper::ms_simplify(input = wards_sf, keep_shapes = T, keep = 0.01)
#
# write_sf(wards_sf_simple, paste(c(dir_stub, "../data/Map/Lambeth_2021_Lower_Super_Output_Areas_simple.geojson"),collapse = ''), delete_dsn = T)
# Simplify lsoa outlines - only needed to do once
# require(rmapshaper)
#lsoa_sf <- read_sf(paste(c(dir_stub, "../data/Map/Lambeth_2021_Lower_Super_Output_Areas.geojson"),collapse = ''))
# # proj4string(wards_ni_sp)
#
# lsoa_sf_simple <- rmapshaper::ms_simplify(input = lsoa_sf, keep_shapes = T, keep = 0.01)
#
# write_sf(lsoa_sf_simple, paste(c(dir_stub, "../data/Map/Lambeth_2021_Lower_Super_Output_Areas_simple.geojson"),collapse = ''), delete_dsn = T)
# Simplify lsoa old outlines - only needed to do once
# require(rmapshaper)
#
# lsoa_old_sf <- read_sf(paste(c(dir_stub, "../data/Map/lsoa_map_lambeth_old.geojson"),collapse = ''))
#
# lsoa_old_sf_simple <- rmapshaper::ms_simplify(input = lsoa_old_sf, keep_shapes = T, keep = 0.01)
#
# write_sf(lsoa_old_sf_simple, paste(c(dir_stub, "../data/Map/lsoa_map_lambeth_old_simple.geojson"),collapse = ''), delete_dsn = T)
# ###
#
wards_sf_old <- read_sf(paste(c(dir_stub, "../data/Map/lambeth_old_wards_wgs84.geojson"),collapse = ''))
run_direct
dir_stub
getwd()
